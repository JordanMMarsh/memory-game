{"version":3,"sources":["MemoryTile.js","MemoryBoard.js","MemoryGame.js","App.js","serviceWorker.js","index.js"],"names":["MemoryTile","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","marked","index","react_default","a","createElement","className","onClick","src","backImage","alt","frontImage","Component","MemoryBoard","state","tiles","numTiles","started","startingMessage","score","firstCard","firstCardIndex","secondCard","secondCardIndex","matches","value","cardImages","cardBack","backIndex","createBoard","startGame","handleChange","resetCards","gameWin","timer","setState","e","preventDefault","numberTiles","newTiles","randomNumbers","Math","floor","random","length","h","randNumber","indexOf","push","i","temporaryValue","randomIndex","currentIndex","val","currentTiles","_this2","currentScore","totalMatches","setTimeout","clearInterval","isChecked","clickMethod","map","item","src_MemoryTile","onSubmit","type","onChange","checked","id","MemoryGame","src_MemoryBoard","App","src_MemoryGame","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e7588636.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass MemoryTile extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  //If card hasn't already been clicked, send it to parent as a click event\r\n  handleClick() {\r\n    if (!this.props.marked) {\r\n      this.props.handleClick(this.props.index);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.props.marked ? 'flip-container flip' : 'flip-container'}  onClick={this.handleClick}>\r\n\t     <div className=\"flipper\">\r\n\t\t     <div className=\"front\">\r\n         <img className=\"cardBack\" src={this.props.backImage} alt=\"Back of playing card\" />\r\n\t\t     </div>\r\n\t\t     <div className=\"back\">\r\n         <div>\r\n          <img className=\"cardFront\" src={this.props.frontImage} alt=\"Front of playing card\" />\r\n         </div>\r\n\t\t     </div>\r\n\t     </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default MemoryTile;\r\n","import React, { Component } from 'react';\r\nimport MemoryTile from './MemoryTile';\r\n\r\nclass MemoryBoard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tiles: [],\r\n      numTiles: 8, //default easy mode tiles\r\n      started: false, //has game started\r\n      startingMessage: \"Match the pairs to win!\",\r\n      score: 0,\r\n      firstCard: \"\",\r\n      firstCardIndex: \"\",\r\n      secondCard: \"\",\r\n      secondCardIndex: \"\",\r\n      matches: 0,\r\n      value: false,\r\n      cardImages: [\"images/AC.png\",\"images/2C.png\",\"images/3C.png\",\"images/4C.png\",\"images/5C.png\",\"images/6C.png\",\"images/7C.png\",\"images/8C.png\",\"images/9C.png\",\"images/10C.png\",\"images/JC.png\",\"images/QC.png\",\"images/KC.png\",\"images/AS.png\",\"images/2S.png\",\"images/3S.png\",\"images/4S.png\",\"images/5S.png\",\"images/6S.png\",\"images/7S.png\",\"images/8S.png\",\"images/9S.png\",\"images/10S.png\",\"images/JS.png\",\r\n      \"images/QS.png\",\"images/KS.png\",\"images/2D.png\",\"images/3D.png\",\"images/4D.png\",\"images/5D.png\",\"images/6D.png\",\"images/7D.png\",\"images/8D.png\",\"images/9D.png\",\"images/10D.png\",\"images/JD.png\",\"images/QD.png\",\"images/KD.png\",\"images/AH.png\",\"images/2H.png\",\"images/3H.png\",\"images/4H.png\",\"images/5H.png\",\"images/6H.png\",\"images/7H.png\",\"images/8H.png\",\"images/9H.png\",\"images/10H.png\",\r\n      \"images/JH.png\",\"images/QH.png\",\"images/KH.png\"],\r\n      cardBack: [\"images/purple_back.png\",\"images/blue_back.png\",\"images/gray_back.png\",\"images/red_back.png\"],\r\n      backIndex: 0\r\n    }\r\n    this.createBoard = this.createBoard.bind(this);\r\n    this.startGame = this.startGame.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.resetCards = this.resetCards.bind(this);\r\n    this.gameWin = this.gameWin.bind(this);\r\n    this.timer = null;\r\n  }\r\n\r\nhandleChange() {\r\n    this.setState({\r\n      value: !this.state.value\r\n    });\r\n  }\r\n\r\nstartGame(e) {\r\n    e.preventDefault();\r\n    this.setState({\r\n        tiles: [],\r\n        score: 0,\r\n        firstCard: \"\",\r\n        firstCardIndex: \"\",\r\n        secondCard: \"\",\r\n        secondCardIndex: \"\",\r\n        matches: 0\r\n      });\r\n      this.createBoard();\r\n}\r\n\r\n  //Accept an even number and create a random board of tiles with matching pairs\r\n  createBoard() {\r\n    let numberTiles = this.state.numTiles;\r\n    if (this.state.value) numberTiles *= 4;\r\n    let newTiles = [];\r\n    let randomNumbers = [];\r\n\r\n    let cardBack = Math.floor(Math.random() * (this.state.cardBack.length))\r\n    //Create pairs of random numbers and push pairs to random number array\r\n    for (let h = 0; h < numberTiles / 2; h++) {\r\n      let randNumber = Math.floor(Math.random()*(this.state.cardImages.length));\r\n      while (randomNumbers.indexOf(randNumber) != -1) {\r\n        randNumber = Math.floor(Math.random()*(this.state.cardImages.length));\r\n      }\r\n      randomNumbers.push(randNumber);\r\n      randomNumbers.push(randNumber);\r\n    }\r\n\r\n    //Assign each tile in the array an index, a value where every two tiles is a pair, and a default value\r\n    for (let i = 0; i < numberTiles; i++)\r\n    {\r\n      newTiles.push({index: i, value: randomNumbers[i], marked: false, cardBack: cardBack});\r\n    }\r\n\r\n    //Shuffle array using Fisher-Yates Shuffle\r\n    let currentIndex = newTiles.length;\r\n    let temporaryValue;\r\n    let randomIndex;\r\n\r\n    while (currentIndex > 0) {\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex--;\r\n\r\n      temporaryValue = newTiles[currentIndex];\r\n      newTiles[currentIndex] = newTiles[randomIndex];\r\n      newTiles[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    this.setState({\r\n        started: true,\r\n        tiles: newTiles,\r\n        numTiles: numberTiles,\r\n        backIndex: cardBack\r\n    });\r\n  }\r\n\r\n  //val = index of tile pressed\r\n  handleClick(val) {\r\n    let currentTiles = this.state.tiles;\r\n    if (this.state.firstCard == \"\") {\r\n      for (let i = 0; i < currentTiles.length; i++) {\r\n        if (currentTiles[i].index == val) {\r\n          //set tile to marked, update state with current tile for later use\r\n          currentTiles[i].marked = !currentTiles[i].marked;\r\n          this.setState({\r\n            tiles: currentTiles,\r\n            firstCard: currentTiles[i],\r\n            firstCardIndex: i\r\n          });\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    else if(this.state.secondCard == \"\") {\r\n      for (let i = 0; i < currentTiles.length; i++) {\r\n        if (currentTiles[i].index == val) {\r\n          //set tile to marked, update state with current tile for later use\r\n          currentTiles[i].marked = !currentTiles[i].marked;\r\n          this.setState({\r\n            tiles: currentTiles,\r\n            marked: true,\r\n            secondCard: currentTiles[i],\r\n            secondCardIndex: i\r\n          });\r\n          return;\r\n        }\r\n      }\r\n    }\r\n}\r\n\r\n//Check if two cards have been chosen, then decide if they are a match and what to do after\r\ncomponentDidUpdate() {\r\n  if (this.state.firstCard != \"\" && this.state.secondCard != \"\") {\r\n    let firstCard = this.state.firstCard;\r\n    let firstCardIndex = this.state.firstCardIndex;\r\n    let secondCard = this.state.secondCard;\r\n    let secondCardIndex = this.state.secondCardIndex;\r\n    let currentTiles = this.state.tiles;\r\n    let currentScore = this.state.score;\r\n    let matches = this.state.matches;\r\n    let totalMatches = this.state.numTiles / 2;\r\n    //if a match\r\n    if (currentTiles[firstCardIndex].value == currentTiles[secondCardIndex].value) {\r\n      currentScore += 10;\r\n      matches++;\r\n    }\r\n    else {\r\n      currentTiles[firstCardIndex].marked = false;\r\n      currentTiles[secondCardIndex].marked = false;\r\n    }\r\n    //if you have won, call game win on delay\r\n    if (totalMatches == matches) {\r\n      this.timer = setTimeout(() => this.gameWin(), 2000);\r\n    }\r\n    else {\r\n      //haven't won, reset selected cards after a delay\r\n      this.timer = setTimeout(() => this.resetCards(currentTiles, currentScore, matches), 2000);\r\n    }\r\n  }\r\n}\r\n\r\ngameWin() {\r\n  if (this.state.started && this.state.matches != 0) {\r\n    this.setState({\r\n      started: false,\r\n      startingMessage: \"You won! Congrats!\"\r\n    });\r\n    clearInterval(this.timer);\r\n    }\r\n  }\r\n\r\n  //Called after X seconds from handleClick to allow user to see selection before resetting\r\nresetCards(currentTiles, currentScore, matches) {\r\n    this.setState({\r\n      tiles: currentTiles,\r\n      firstCard: \"\",\r\n      firstCardIndex: \"\",\r\n      secondCard: \"\",\r\n      secondCardIndex: \"\",\r\n      score: currentScore,\r\n      matches: matches\r\n    });\r\n    clearInterval(this.timer);\r\n  }\r\n\r\nrender() {\r\n    let clickMethod = this.handleClick;\r\n    let cardImages = this.state.cardImages;\r\n    let cardBack = this.state.cardBack;\r\n    let isChecked;\r\n    this.state.value ? isChecked = \"checked\" : isChecked = \"\";\r\n    if (this.state.started) {\r\n    return (\r\n      <div>\r\n      <h2>Score: {this.state.score}</h2><br />\r\n      <div className=\"MemoryBoard\">\r\n      {this.state.tiles.map(function(item, i) {\r\n        return <MemoryTile index={item.index} value={item.value} marked={item.marked} handleClick={clickMethod} frontImage={cardImages[item.value]} backImage={cardBack[item.cardBack]}/>;\r\n      })}\r\n      </div></div>\r\n    );}\r\n    else {\r\n      return (\r\n        <div>\r\n        <form onSubmit={this.startGame}>\r\n        <h2>{this.state.startingMessage}</h2><br/>\r\n        <p>Hard Mode:</p>\r\n        <label className=\"switch\">\r\n        <input type=\"checkbox\" onChange={this.handleChange} checked={isChecked}/>\r\n        <span className=\"slider round\"></span>\r\n        </label><br /><br />\r\n        <input id=\"buttonSubmit\" type=\"submit\" value=\"Start Game\" />\r\n        </form>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default MemoryBoard;\r\n","import React, { Component } from 'react';\r\nimport MemoryBoard from './MemoryBoard';\r\n\r\nclass MemoryGame extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"MemoryGame\">\r\n      <h2>Memory Game</h2>\r\n      <MemoryBoard />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MemoryGame;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport MemoryGame from './MemoryGame';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <MemoryGame />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}